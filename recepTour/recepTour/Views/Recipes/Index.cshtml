@model IEnumerable<recepTour.ViewModels.RecipeViewModel>
@inject UserManager<IdentityUser> userManager
@inject RecepTourContext context

@{
    ViewData["Title"] = "Index";
    if(User.Identity.IsAuthenticated)
    {
        int userId = Int32.Parse(userManager.FindByNameAsync(User.Identity.Name).Result.Id);
    }
}

<h1>Recipes</h1>
<p>
    @if (User.Identity.IsAuthenticated)
    {
        <a asp-action="Create">Create New</a>
    }
</p>


<form asp-controller="Recipes" asp-action="Index" method="get">
    <p>
        Search by title: <input type="text" name="title" />
        <input type="submit" value="Search" />
        <input type="submit" asp-controller="Recipes" asp-action="AllRecipes" value="Reset" />
    </p>
</form>

<form asp-controller="Recipes" asp-action="ByUser" method="get">
    <p>
        Search by user: <input type="text" name="userName" />
        <input type="submit" value="Search" />
        <input type="submit" asp-controller="Recipes" asp-action="AllRecipes" value="Reset" />
    </p>
</form>

<form>
    @foreach (var grocery in context.Groceries.ToList())
    {
        <p>
            <input data-val="true"
                   id="isActive"
                   name="isActive"
                   type="checkbox"
                   value="true" />
            <label>
                @Html.DisplayFor(grocery => grocery.Name)
            </label>
        </p>
    }

    <input type="submit" value="Search" />
    <input type="submit" asp-controller="Recipes" asp-action="AllRecipes" value="Reset" />
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Title)
            </th>
            <th>
                Difficulty level
            </th>
            <th>
                User
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.DiffLevelName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.User)
            </td>
            <td>
                @if (User.Identity.IsAuthenticated && Int32.Parse(userManager.FindByNameAsync(User.Identity.Name).Result.Id) == context.UserRecipes.Where(c => c.RecipeId == item.Id).FirstOrDefault().UserId)
                {
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> <em> |</em>
                } 
                <a asp-action="Details" asp-route-id="@item.Id">Details</a>
                @if (User.Identity.IsAuthenticated && Int32.Parse(userManager.FindByNameAsync(User.Identity.Name).Result.Id) == context.UserRecipes.Where(c => c.RecipeId == item.Id).FirstOrDefault().UserId)
                {
                <em> | </em> <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
                }
            </td>
            @if (User.Identity.IsAuthenticated)
            {

                int userId = Int32.Parse(userManager.FindByNameAsync(User.Identity.Name).Result.Id);
                if (!context.UserFavorites.Any(uf => uf.UserId == userId && uf.RecipeId == item.Id))
                {
                    <td>
                        <form asp-controller="UserFavorites" asp-action="Create" asp-route-userId="@userId" asp-route-recipeId="@item.Id" method="post">
                            <input type="submit" value="Favorite" class="btn btn-primary form-inline" />
                        </form>
                    </td>
                }
            }
        </tr>
        }
    </tbody>
</table>
